فكرة ممتازة جداً. أنت الآن تطلب إنشاء "مخطط علاقات الكيانات" أو Entity-Relationship Diagram (ERD) ولكن بشكل وصفي وسهل القراءة. هذا النوع من التوثيق هو من أهم الأدوات التي تساعد أي مطور (بما فيهم نحن) على فهم الصورة الكبيرة وكيفية تدفق البيانات في النظام.

سأقوم بصياغة هذا المخطط بطريقة واضحة، مع التركيز على العلاقات الأساسية بين الموديلات.

شبكة ترابط الموديلات في "نظام إدارة الأملاك"

هذا المستند يوضح العلاقات الأساسية بين الموديلات المختلفة في النظام. فهم هذه الشبكة ضروري لفهم كيفية تأثير التغييرات في موديل معين على بقية أجزاء النظام.

1. الأصول الأساسية (Core Assets)

properties (العقارات):

هو الكيان الأعلى في هرم الأصول.

يرتبط بـ:

units (الوحدات): علاقة واحد إلى متعدد (One-to-Many). العقار الواحد يمكن أن يحتوي على عدة وحدات.

supply_contracts (عقود التوريد): علاقة واحد إلى متعدد. العقار الواحد يمكن أن يكون له عدة عقود توريد (صيانة، نظافة).

counters (عدادات الخدمات - مستقبلي): علاقة واحد إلى متعدد. العقار يمكن أن يكون له عدادات خدمات عامة.

units (الوحدات):

هو الكيان التشغيلي الأساسي الذي يتم تأجيره.

يرتبط بـ:

properties (العقarat): علاقة متعدد إلى واحد (Many-to-One). كل وحدة تنتمي إلى عقار واحد فقط.

contracts_rental (عقود الإيجار): علاقة متعدد إلى متعدد (Many-to-Many) عبر جدول وسيط contract_units. العقد الواحد يمكن أن يشمل عدة وحدات، والوحدة يمكن تأجيرها في عدة عقود (ولكن ليس في نفس الفترة الزمنية).

counters (عدادات الخدمات - مستقبلي): علاقة متعدد إلى متعدد (Many-to-Many) عبر جدول وسيط counter_units. الوحدة يمكن أن يكون لها عدة عدادات، والعداد يمكن أن يخدم عدة وحدات.

2. الأطراف (Parties)

clients (العملاء):

هم مصدر الإيرادات.

يرتبط بـ:

contracts_rental (عقود الإيجار): علاقة واحد إلى متعدد. العميل الواحد يمكن أن يكون لديه عدة عقود إيجار.

invoices (الفواتير - مستقبلي): علاقة واحد إلى متعدد. العميل يمكن إصدار عدة فواتير له.

suppliers (الموردين):

هم مصدر المصروفات والالتزامات.

يرتبط بـ:

supply_contracts (عقود التوريد): علاقة واحد إلى متعدد. المورد الواحد يمكن أن يكون لديه عدة عقود توريد.

projects (المشاريع - مستقبلي): علاقة واحد إلى متعدد. المورد (المقاول) يمكن أن ينفذ عدة مشاريع.

3. العقود والعمليات (Contracts & Operations)

contracts_rental (عقود الإيجار):

هو المحرك الرئيسي للإيرادات المتكررة.

يرتبط بـ:

clients (العملاء): Many-to-One.

units (الوحدات): Many-to-Many (عبر contract_units).

payment_schedules (جداول الدفعات): One-to-Many. العقد الواحد يولد جدول دفعات متعدد.

supply_contracts (عقود التوريد):

هو المحرك الرئيسي للمصروفات المتكررة.

يرتبط بـ:

suppliers (الموردين): Many-to-One.

properties (العقارات): Many-to-One.

payment_schedules (جداول الدفعات): One-to-Many.

4. النظام المالي (Financial Core)

payment_schedules (جداول الدفعات):

هو سجل الالتزامات المالية المستقبلية (المستحقات).

يرتبط بـ:

contracts_rental أو supply_contracts: Many-to-One. كل دفعة تنتمي لعقد واحد.

transactions (الحركات المالية): One-to-Many. الدفعة الواحدة يمكن أن تُسدد عبر عدة حركات (دفع جزئي).

transactions (الحركات المالية):

هو السجل الفعلي لكل حركة نقدية (سندات القبض والصرف).

يرتبط بـ:

payment_schedules (جداول الدفعات): Many-to-One.

bank_accounts (الحسابات البنكية - مستقبلي): Many-to-One.

cash_boxes (الخزائن - مستقبلي): Many-to-One.

5. نظام الإدارة والأمان (Admin & Security)

users (المستخدمون):

يرتبط بـ:

roles (الأدوار): Many-to-One. كل مستخدم له دور واحد.

roles (الأدوار):

يرتبط بـ:

permissions (الصلاحيات): Many-to-Many عبر جدول وسيط role_permissions. الدور الواحد يمكن أن يمتلك عدة صلاحيات.

ملخص مرئي بسيط للعلاقات الرئيسية:
Properties (1) -> (M) Units (M) <--> (M) Contracts (M) -> (1) Clients
^ |
| v
Supply_Contracts (M) -> (1) Suppliers Payment_Schedules (M) -> (1) Transactions
^
|
Bank_Accounts / Cash_Boxes

هذا التوثيق يعطي صورة واضحة جداً عن "من يعتمد على من" في النظام، وهو أمر حيوي لأي مطور يعمل على المشروع. يمكنك حفظه لديك كمرجع أساسي.